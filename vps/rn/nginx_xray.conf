server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    server {
        listen unix:/dev/shm/xray.sock ssl http2 proxy_protocol default_server;
        set_real_ip_from unix:;
        real_ip_header proxy_protocol;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_reject_handshake on;
    }

    server {
        listen unix:/dev/shm/xray.sock ssl http2 proxy_protocol;
        set_real_ip_from unix:;
        real_ip_header proxy_protocol;
        server_name www.example.com;

        ssl_certificate /path/to/xxx.crt;
        ssl_certificate_key /path/to/xxx.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256;
        server_tokens off;
        client_max_body_size 20M;
        set $jellyfin 127.0.0.1;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

     location /jsonrpc {
        proxy_pass http://localhost:6800/jsonrpc;
        proxy_redirect off;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        #以下代码使支持WebSocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        }

     location ^~ /ang {
        alias /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    location = / {
        return 302 http://$host/web/;
        return 302 https://$host/web/;
    }

    location / {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }

    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
    location = /web/ {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:8096/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://$jellyfin:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location ~* ^/Videos/(.*)/(?!live)
        {
      # Set size of a slice (this amount will be always requested from the backend by nginx)
      # Higher value means more latency, lower more overhead
      # This size is independent of the size clients/browsers can request
      slice 2m;

      proxy_cache jellyfin-videos;
      proxy_cache_valid 200 206 301 302 30d;
      proxy_ignore_headers Expires Cache-Control Set-Cookie X-Accel-Expires;
      proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
      proxy_connect_timeout 15s;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      # Transmit slice range to the backend
      proxy_set_header Range $slice_range;

      # This saves bandwidth between the proxy and jellyfin, as a file is only downloaded one time instead of multiple times when multiple clients want to at the same time
      # The first client will trigger the download, the other clients will have to wait until the slice is cached
      # Esp. practical during SyncPlay
      proxy_cache_lock on;
      proxy_cache_lock_age 60s;

      proxy_pass http://$jellyfin:8096;
      proxy_cache_key "jellyvideo$uri?MediaSourceId=$arg_MediaSourceId&VideoCodec=$arg_VideoCodec&AudioCodec=$arg_AudioCodec&AudioStreamIndex=$arg_AudioStreamIndex&VideoBitrate=$arg_VideoBitrate&AudioBitrate=$arg_AudioBitrate&SubtitleMethod=$arg_SubtitleMethod&TranscodingMaxAudioChannels=$arg_TranscodingMaxAudioChannels&RequireAvc=$arg_RequireAvc&SegmentContainer=$arg_SegmentContainer&MinSegments=$arg_MinSegments&BreakOnNonKeyFrames=$arg_BreakOnNonKeyFrames&h264-profile=$h264Profile&h264-level=$h264Level&slicerange=$slice_range";

      # add_header X-Cache-Status $upstream_cache_status; # This is only for debugging cache

    }

    location ~ /Items/(.*)/Images {
      proxy_pass http://127.0.0.1:8096;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Protocol $scheme;
      proxy_set_header X-Forwarded-Host $http_host;

      proxy_cache jellyfin;
      proxy_cache_revalidate on;
      proxy_cache_lock on;
      # add_header X-Cache-Status $upstream_cache_status; # This is only to check if cache is working
    }
}

